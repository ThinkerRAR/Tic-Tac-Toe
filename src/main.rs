mod models;
mod display;
mod game;

use std::io;
use crate::models::{Board, Cell};
use crate::display::show_board;
use crate::game::{parse_input, check_win, is_draw};

fn main() {
    println!("–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ (–∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞)");
    println!("–¢—ã –∏–≥—Ä–∞–µ—à—å –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏ (X)");
    println!("–í–≤–æ–¥–∏ —Ö–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'a1', 'b2' –∏ —Ç.–¥.");

    let mut board: Board = [[Cell::Empty; 3]; 3];

    loop {
        show_board(&board);

        println!("–¢–≤–æ–π —Ö–æ–¥ (X):");
        
        let pos = loop {
            let mut input = String::new();
            io::stdin().read_line(&mut input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
            
            match parse_input(&input) {
                Some(pos) if board[pos.0][pos.1] == Cell::Empty => break pos,
                Some(_) => println!("–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:"),
                None => println!("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ —Ç–∏–ø–∞ 'a1':"),
            }
        };

        board[pos.0][pos.1] = Cell::X;

        if check_win(&board, Cell::X) {
            show_board(&board);
            println!("–¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ");
            break;
        }

        if is_draw(&board) {
            show_board(&board);
            println!("–ù–∏—á—å—è! ü§ù");
            break;
        }
    }
}